# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: botany-bay-api

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-plugin-typescript
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-offline-dynamodb-streams
  - serverless-offline

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations

  serverless-offline-dynamodb-streams:
    apiVersion: '2013-12-02'
    endpoint: http://0.0.0.0:8000
    region: eu-west-1
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false
    readInterval: 500

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-west-2
  environment:
    LOCALE: en_US
    APIKEY: ''
    BASE_URL: https://us.api.blizzard.com
    TABLE_RAID_TEAMS: ${self:service}-${opt:stage, self:provider.stage}-RaidTeams
    TABLE_RAID_TEAM_MEMBERS: ${self:service}-${opt:stage, self:provider.stage}-RaidTeamMembers
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLE_RAID_TEAMS}"

# you can add packaging information here
package:
  include:
    - handler.ts
  exclude:
    - node_modules/**
    - '!node_modules/axios/**'
    - '!node_modules/follow-redirects/**'
    - '!node_modules/is-buffer/**'
    - '!node_modules/debug/**'
    - '!node_modules/ms/**'
    - '!node_modules/blizzy-core/**'

functions:

  raidTeamChangedStreamHandler:
    handler: handler.lookupCharacterStreamHandler
    events:
      - stream:
          enabled: true
          type: dynamodb
          arn: 
            Fn::GetAtt:
              - RaidTeamMembersDynamoDbTable
              - Arn
          batchSize: 10
          startingPosition: TRIM_HORIZON
  
  createRaidTeam:
    handler: handler.createRaidTeam
    events:
      - http:
          path: raid-teams
          method: post
          cors: true

  listRaidTeam:
    handler: handler.listRaidTeams
    events:
      - http:
          path: raid-teams
          method: get
          cors: true

  retrieveRaidTeam:
    handler: handler.retrieveRaidTeam
    events:
      - http:
          path: raid-teams/{id}
          method: get
          cors: true

  updateRaidTeam:
    handler: handler.updateRaidTeam
    events:
      - http:
          path: raid-teams/{id}
          method: put
          cors: true

  deleteRaidTeam:
    handler: handler.deleteRaidTeam
    events:
      - http:
          path: raid-teams/{id}
          method: delete
          cors: true

  createTeamMember:
    handler: handler.createTeamMember
    events:
      - http:
          path: raid-teams/{raidTeamId}/team-members
          method: post
          cors: true

  listTeamMember:
    handler: handler.listTeamMembers
    events:
      - http:
          path: raid-teams/{raidTeamId}/team-members
          method: get
          cors: true

  retrieveTeamMember:
    handler: handler.retrieveTeamMember
    events:
      - http:
          path: raid-teams/{raidTeamId}/team-members/{id}
          method: get
          cors: true

  updateTeamMember:
    handler: handler.updateTeamMember
    events:
      - http:
          path: raid-teams/{raidTeamId}/team-members/{id}
          method: put
          cors: true

  deleteTeamMember:
    handler: handler.deleteTeamMember
    events:
      - http:
          path: raid-teams/{raidTeamId}/team-members/{id}
          method: delete
          cors: true

resources:
  Resources:
    RaidTeamsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.TABLE_RAID_TEAMS}

    RaidTeamMembersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: raidTeamId
            AttributeType: S
        KeySchema:
          -
            AttributeName: raidTeamId
            KeyType: HASH
          -
            AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.TABLE_RAID_TEAM_MEMBERS}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES 